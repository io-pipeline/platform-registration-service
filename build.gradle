plugins {
    alias(libs.plugins.java)
    alias(libs.plugins.quarkus)
    alias(libs.plugins.maven.publish)
}



dependencies {
    implementation 'io.quarkus:quarkus-container-image-docker'
    // Use published BOM from Maven Local
    implementation platform('io.pipeline:pipeline-bom:1.0.0-SNAPSHOT')
    
    // Dev services infrastructure (shared Docker Compose stack)
    runtimeOnly 'io.pipeline:devservices-docker-compose:1.0.0-SNAPSHOT'

    // Quarkus dependencies
    implementation 'io.quarkus:quarkus-grpc'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-hibernate-reactive-panache'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-reactive-mysql-client'
    implementation 'io.quarkus:quarkus-jdbc-mysql'
    implementation 'io.quarkus:quarkus-flyway'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-micrometer-registry-prometheus'
    implementation 'io.quarkus:quarkus-messaging-kafka'
    implementation libs.apicurio.registry.protobuf.serde

    // Consul integration
    implementation 'io.smallrye.reactive:smallrye-mutiny-vertx-consul-client'
    implementation 'io.quarkus:quarkus-vertx'
    implementation 'io.smallrye.stork:stork-service-discovery-consul'

    // Apicurio Registry v3 client
    implementation libs.apicurio.registry.java.sdk
    implementation libs.apicurio.registry.common

    // Pipeline libraries (published to Maven Local)
    implementation 'io.pipeline:grpc-stubs:1.0.0-SNAPSHOT'
    implementation 'io.pipeline:pipeline-commons:1.0.0-SNAPSHOT'
    implementation 'io.pipeline:dynamic-grpc:1.0.0-SNAPSHOT'

    // Testing
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'io.rest-assured:rest-assured'
    runtimeOnly libs.quarkus.logging.manager
}

group 'io.pipeline'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

// Publishing configuration
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name.set('Platform Registration Service')
                description.set('Central service registry and discovery for the Pipeline platform')
                url.set('https://github.com/io-pipeline/platform-registration-service')

                licenses {
                    license {
                        name.set('Apache License 2.0')
                        url.set('https://www.apache.org/licenses/LICENSE-2.0')
                    }
                }

                developers {
                    developer {
                        id.set('krickert')
                        name.set('Pipeline Engine Team')
                    }
                }

                scm {
                    connection.set('scm:git:git://github.com/io-pipeline/platform-registration-service.git')
                    developerConnection.set('scm:git:ssh://github.com/io-pipeline/platform-registration-service.git')
                    url.set('https://github.com/io-pipeline/platform-registration-service')
                }
            }
        }
    }

    repositories {
        // Publish to Gitea Maven registry (primary)
        maven {
            name = "Gitea"
            url = uri("https://git.rokkon.com/api/packages/io-pipeline/maven")
            credentials {
                username = project.findProperty("gitea.user") ?: System.getenv("GITEA_USER") ?: "krickert"
                password = project.findProperty("gitea.token") ?: System.getenv("GITEA_TOKEN")
            }
        }

        // Publish to GitHub Packages (mirror)
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/io-pipeline/platform-registration-service")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: System.getenv("GH_USER")
                password = System.getenv("GITHUB_TOKEN") ?: System.getenv("GH_PAT")
            }
        }
    }
}
