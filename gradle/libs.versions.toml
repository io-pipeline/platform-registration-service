[versions]
quarkus = "3.28.5"
jandex-plugin = "2.3.0"
commons-lang3 = "3.19.0"
opennlp-tools = "2.5.6.1"
jackson-module-jsonschema = "2.20.0"
logging-manager = "3.4.1"
opensearch = "3.2.0"
httpclient5 = "5.5.1"
# gRPC and Protobuf versions - match Quarkus defaults
grpc = "1.76.0"
protobuf = "4.33.0"

# Quarkiverse extensions
quinoa = "2.6.2"
wiremock = "1.5.1"
wiremock-standalone = "3.13.1"
wiremock-grpc-extension = "0.11.0"
hibernate-types = "2.2.0"
quarkus-mcp-server = "1.5.0"
# AWS SDK
aws-sdk = "2.35.10"
# Apicurio
apicurio = "3.1.1"
# Testing
awaitility = "4.3.0"
testcontainers = "2.0.1"
assertj = "3.27.6"
hamcrest = "3.0"
json-schema-validator = "1.5.9"
# Other libraries
jgrapht = "1.5.2"
jimfs = "1.3.1"
memoryfilesystem = "2.8.1"
# Apache Tika - using 4.0.0-SNAPSHOT for latest features
tika = "4.0.0-SNAPSHOT"
# DJL (Deep Java Library)
djl = "0.35.0"
djl-pytorch-jni = "2.7.1-0.35.0"
djl-pytorch-native = "2.7.1"
# Apache Commons
commons-io = "2.20.0"
commons-compress = "1.28.0"
opencsv = "5.12.0"
mutiny-test-utils = "3.0.0"
testcontainers-consul = "1.21.3"
smallrye-reactive-messaging = "4.13.0"
# Document parsing
commonmark = "0.25.1"
pdfbox = "3.0.5"
# Security
password4j = "1.8.4"

[libraries]
# Quarkus BOM
quarkus-bom = { module = "io.quarkus.platform:quarkus-bom", version.ref = "quarkus" }
quarkus-amazon-services-bom = { module = "io.quarkus.platform:quarkus-amazon-services-bom", version.ref = "quarkus" }

# Quarkus extensions
quarkus-grpc = { module = "io.quarkus:quarkus-grpc" }
quarkus-mutiny = { module = "io.quarkus:quarkus-mutiny" }
quarkus-arc = { module = "io.quarkus:quarkus-arc" }
quarkus-rest = { module = "io.quarkus:quarkus-rest" }
quarkus-rest-jackson = { module = "io.quarkus:quarkus-rest-jackson" }
quarkus-jackson = { module = "io.quarkus:quarkus-jackson" }
quarkus-logging-manager = { module = "io.quarkiverse.loggingmanager:quarkus-logging-manager", version.ref = "logging-manager"}
quarkus-consul-config = { module = "io.quarkus:quarkus-consul-config" }
quarkus-micrometer = { module = "io.quarkus:quarkus-micrometer" }
quarkus-micrometer-registry-prometheus = { module = "io.quarkus:quarkus-micrometer-registry-prometheus" }

# gRPC and Protobuf
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-java-util = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-services = { module = "io.grpc:grpc-services", version.ref = "grpc" }
grpc-core = { module = "io.grpc:grpc-core", version.ref = "grpc" }
grpc-api = { module = "io.grpc:grpc-api", version.ref = "grpc" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
proto-google-common-protos = { module = "com.google.api.grpc:proto-google-common-protos" }

# Google Guava (version managed by Quarkus BOM)
guava = { module = "com.google.guava:guava" }

# Data processing
opencsv = { module = "com.opencsv:opencsv", version.ref = "opencsv" }

# Utility libraries
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commons-lang3" }
opennlp-tools = { module = "org.apache.opennlp:opennlp-tools", version.ref = "opennlp-tools" }
jackson-module-jsonschema = { module = "com.fasterxml.jackson.module:jackson-module-jsonSchema", version.ref = "jackson-module-jsonschema" }

# Testing
quarkus-junit5 = { module = "io.quarkus:quarkus-junit5" }
rest-assured = { module = "io.rest-assured:rest-assured" }
mutiny-test-utils = { module = "io.smallrye.reactive:mutiny-test-utils", version.ref = "mutiny-test-utils" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-consul = { module = "org.testcontainers:consul", version.ref = "testcontainers-consul" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers-consul" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
hamcrest = { module = "org.hamcrest:hamcrest", version.ref = "hamcrest" }
hamcrest-library = { module = "org.hamcrest:hamcrest-library", version.ref = "hamcrest" }
json-schema-validator = { module = "com.networknt:json-schema-validator", version.ref = "json-schema-validator" }

# OpenSearch
opensearch-java = { module = "org.opensearch.client:opensearch-java", version.ref = "opensearch" }

# Apache HTTP Client
httpclient5 = { module = "org.apache.httpcomponents.client5:httpclient5", version.ref = "httpclient5" }

# Quarkiverse extensions
quarkus-quinoa = { module = "io.quarkiverse.quinoa:quarkus-quinoa", version.ref = "quinoa" }
quarkus-wiremock = { module = "io.quarkiverse.wiremock:quarkus-wiremock", version.ref = "wiremock" }
quarkus-wiremock-test = { module = "io.quarkiverse.wiremock:quarkus-wiremock-test", version.ref = "wiremock" }
quarkus-hibernate-types = { module = "io.quarkiverse.hibernatetypes:quarkus-hibernate-types", version.ref = "hibernate-types" }
quarkus-mcp-server-sse = { module = "io.quarkiverse.mcp:quarkus-mcp-server-sse", version.ref = "quarkus-mcp-server" }

# WireMock Standalone (for grpc-wiremock library)
wiremock-standalone = { module = "org.wiremock:wiremock-standalone", version.ref = "wiremock-standalone" }
wiremock-grpc-extension-standalone = { module = "org.wiremock:wiremock-grpc-extension-standalone", version.ref = "wiremock-grpc-extension" }

# AWS SDK
aws-sdk-url-connection = { module = "software.amazon.awssdk:url-connection-client", version.ref = "aws-sdk" }
aws-sdk-netty-nio = { module = "software.amazon.awssdk:netty-nio-client", version.ref = "aws-sdk" }

# Apicurio Registry
apicurio-registry-protobuf-serde = { module = "io.apicurio:apicurio-registry-protobuf-serde-kafka", version.ref = "apicurio" }
apicurio-registry-java-sdk = { module = "io.apicurio:apicurio-registry-java-sdk", version.ref = "apicurio" }
apicurio-registry-common = { module = "io.apicurio:apicurio-registry-common", version.ref = "apicurio" }

# Other libraries
jgrapht-core = { module = "org.jgrapht:jgrapht-core", version.ref = "jgrapht" }
jimfs = { module = "com.google.jimfs:jimfs", version.ref = "jimfs" }
memoryfilesystem = { module = "com.github.marschall:memoryfilesystem", version.ref = "memoryfilesystem" }

# Apache Tika
tika-core = { module = "org.apache.tika:tika-core", version.ref = "tika" }
tika-parsers-standard = { module = "org.apache.tika:tika-parsers-standard-package", version.ref = "tika" }
tika-parser-scientific = { module = "org.apache.tika:tika-parser-scientific-package", version.ref = "tika" }
tika-parser-ocr = { module = "org.apache.tika:tika-parser-ocr-module", version.ref = "tika" }

# DJL (Deep Java Library)
djl-huggingface-tokenizers = { module = "ai.djl.huggingface:tokenizers", version.ref = "djl" }
djl-pytorch-model-zoo = { module = "ai.djl.pytorch:pytorch-model-zoo", version.ref = "djl" }
djl-pytorch-jni = { module = "ai.djl.pytorch:pytorch-jni", version.ref = "djl-pytorch-jni" }


# Apache Commons
commons-io = { module = "commons-io:commons-io", version.ref = "commons-io" }
commons-compress = { module = "org.apache.commons:commons-compress", version.ref = "commons-compress" }

# Document parsing
commonmark = { module = "org.commonmark:commonmark", version.ref = "commonmark" }
pdfbox = { module = "org.apache.pdfbox:pdfbox", version.ref = "pdfbox" }

# Security
password4j = { module = "com.password4j:password4j", version.ref = "password4j" }

# SmallRye Reactive Messaging (for testing)
smallrye-reactive-messaging-in-memory = { module = "io.smallrye.reactive:smallrye-reactive-messaging-in-memory", version.ref = "smallrye-reactive-messaging" }

[plugins]
quarkus = { id = "io.quarkus", version.ref = "quarkus" }
jandex = { id = "org.kordamp.gradle.jandex", version.ref = "jandex-plugin" }
java = { id = "java" }
java-library = { id = "java-library" }
java-platform = { id = "java-platform" }
maven-publish = { id = "maven-publish" }

[bundles]
# Common Quarkus dependencies
quarkus-common = ["quarkus-arc", "quarkus-mutiny"]
quarkus-grpc = ["quarkus-grpc"]
quarkus-rest = ["quarkus-rest", "quarkus-rest-jackson"]