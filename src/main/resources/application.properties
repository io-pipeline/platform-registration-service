# Application
quarkus.application.name=platform-registration-service
quarkus.application.version=1.0.0

# Container Image Configuration
quarkus.container-image.registry=git.rokkon.com
quarkus.container-image.group=io-pipeline
quarkus.container-image.name=platform-registration-service
quarkus.container-image.tag=latest
quarkus.container-image.additional-tags=${quarkus.application.version}

# gRPC uses same server as HTTP
quarkus.grpc.server.use-separate-server=false
quarkus.grpc.server.enable-health-service=true

# HTTP Configuration (also serves gRPC)
quarkus.http.port=38101
quarkus.http.root-path=/platform-registration
%dev.quarkus.http.port=38101
%dev.quarkus.http.host=0.0.0.0

# Database
quarkus.datasource.db-kind=mysql

# Compose Dev Services (Dev)
%dev.quarkus.compose.devservices.files=../../src/test/resources/compose-devservices.yml
%dev.quarkus.compose.devservices.project-name=pipeline-shared-devservices
%dev.quarkus.compose.devservices.start-services=true
%dev.quarkus.compose.devservices.stop-services=false
%dev.quarkus.compose.devservices.reuse-project-for-tests=true
%dev.quarkus.devservices.timeout=120s

# Dev Services - Disable default PostgreSQL dev service (use compose instead)
%dev.quarkus.datasource.devservices.enabled=false

# Database configuration for dev mode (using the shared MySQL from compose)
%dev.quarkus.datasource.username=pipeline
%dev.quarkus.datasource.password=password
%dev.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/pipeline
%dev.quarkus.datasource.reactive.url=mysql://localhost:3306/pipeline

# Test profile - use dev services
%test.quarkus.datasource.devservices.enabled=true



# Hibernate
quarkus.hibernate-orm.schema-management.strategy=none
quarkus.hibernate-orm.mapping.format.global=ignore
quarkus.flyway.migrate-at-start=true

# Consul (optional)
pipeline.consul.enabled=true
quarkus.consul-config.enabled=false
quarkus.stork.my-service.service-discovery.type=consul

# Metrics
quarkus.micrometer.export.prometheus.enabled=true

# Kafka for OpenSearch Events
kafka.bootstrap.servers=localhost:9092
%prod.kafka.bootstrap.servers=kafka:9092
%dev.kafka.bootstrap.servers=localhost:9094
%test.kafka.bootstrap.servers=localhost:9095

# OpenSearch Events - Service Registered Channel
mp.messaging.outgoing.opensearch-service-registered-events.connector=smallrye-kafka
mp.messaging.outgoing.opensearch-service-registered-events.topic=opensearch-service-registered-events
mp.messaging.outgoing.opensearch-service-registered-events.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
mp.messaging.outgoing.opensearch-service-registered-events.value.serializer=io.apicurio.registry.serde.protobuf.ProtobufKafkaSerializer
mp.messaging.outgoing.opensearch-service-registered-events.apicurio.registry.auto-register=true
mp.messaging.outgoing.opensearch-service-registered-events.apicurio.registry.artifact-id=opensearch-service-registered-events-value
mp.messaging.outgoing.opensearch-service-registered-events.apicurio.registry.artifact-type=PROTOBUF
mp.messaging.outgoing.opensearch-service-registered-events.apicurio.registry.proto.message-name=ServiceRegistered
%dev.mp.messaging.outgoing.opensearch-service-registered-events.apicurio.registry.url=http://localhost:8081/apis/registry/v3
%test.mp.messaging.outgoing.opensearch-service-registered-events.apicurio.registry.url=http://localhost:8082/apis/registry/v3

# OpenSearch Events - Service Unregistered Channel  
mp.messaging.outgoing.opensearch-service-unregistered-events.connector=smallrye-kafka
mp.messaging.outgoing.opensearch-service-unregistered-events.topic=opensearch-service-unregistered-events
mp.messaging.outgoing.opensearch-service-unregistered-events.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
mp.messaging.outgoing.opensearch-service-unregistered-events.value.serializer=io.apicurio.registry.serde.protobuf.ProtobufKafkaSerializer
mp.messaging.outgoing.opensearch-service-unregistered-events.apicurio.registry.auto-register=true
mp.messaging.outgoing.opensearch-service-unregistered-events.apicurio.registry.artifact-id=opensearch-service-unregistered-events-value
mp.messaging.outgoing.opensearch-service-unregistered-events.apicurio.registry.artifact-type=PROTOBUF
mp.messaging.outgoing.opensearch-service-unregistered-events.apicurio.registry.proto.message-name=ServiceUnregistered
%dev.mp.messaging.outgoing.opensearch-service-unregistered-events.apicurio.registry.url=http://localhost:8081/apis/registry/v3
%test.mp.messaging.outgoing.opensearch-service-unregistered-events.apicurio.registry.url=http://localhost:8082/apis/registry/v3

# OpenSearch Events - Module Registered Channel
mp.messaging.outgoing.opensearch-module-registered-events.connector=smallrye-kafka
mp.messaging.outgoing.opensearch-module-registered-events.topic=opensearch-module-registered-events
mp.messaging.outgoing.opensearch-module-registered-events.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
mp.messaging.outgoing.opensearch-module-registered-events.value.serializer=io.apicurio.registry.serde.protobuf.ProtobufKafkaSerializer
mp.messaging.outgoing.opensearch-module-registered-events.apicurio.registry.auto-register=true
mp.messaging.outgoing.opensearch-module-registered-events.apicurio.registry.artifact-id=opensearch-module-registered-events-value
mp.messaging.outgoing.opensearch-module-registered-events.apicurio.registry.artifact-type=PROTOBUF
mp.messaging.outgoing.opensearch-module-registered-events.apicurio.registry.proto.message-name=ModuleRegistered
%dev.mp.messaging.outgoing.opensearch-module-registered-events.apicurio.registry.url=http://localhost:8081/apis/registry/v3
%test.mp.messaging.outgoing.opensearch-module-registered-events.apicurio.registry.url=http://localhost:8082/apis/registry/v3

# OpenSearch Events - Module Unregistered Channel
mp.messaging.outgoing.opensearch-module-unregistered-events.connector=smallrye-kafka
mp.messaging.outgoing.opensearch-module-unregistered-events.topic=opensearch-module-unregistered-events
mp.messaging.outgoing.opensearch-module-unregistered-events.key.serializer=org.apache.kafka.common.serialization.UUIDSerializer
mp.messaging.outgoing.opensearch-module-unregistered-events.value.serializer=io.apicurio.registry.serde.protobuf.ProtobufKafkaSerializer
mp.messaging.outgoing.opensearch-module-unregistered-events.apicurio.registry.auto-register=true
mp.messaging.outgoing.opensearch-module-unregistered-events.apicurio.registry.artifact-id=opensearch-module-unregistered-events-value
mp.messaging.outgoing.opensearch-module-unregistered-events.apicurio.registry.artifact-type=PROTOBUF
mp.messaging.outgoing.opensearch-module-unregistered-events.apicurio.registry.proto.message-name=ModuleUnregistered
%dev.mp.messaging.outgoing.opensearch-module-unregistered-events.apicurio.registry.url=http://localhost:8081/apis/registry/v3
%test.mp.messaging.outgoing.opensearch-module-unregistered-events.apicurio.registry.url=http://localhost:8082/apis/registry/v3


# Global connector defaults for dev so emitters wire cleanly
%dev.mp.messaging.connector.smallrye-kafka.bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v3


# Quinoa Configuration (Vue.js UI)

# Logging
quarkus.log.level=INFO
quarkus.log.category."io.pipeline.registry".level=INFO
%dev.quarkus.log.console.level=INFO
%dev.quarkus.log.category."io.quarkus.grpc".level=WARN
%dev.quarkus.log.category."io.smallrye.stork".level=WARN

# File logging configuration
%dev.quarkus.log.file.enabled=true
%dev.quarkus.log.file.path=logs/platform-registration-service.log
%dev.quarkus.log.file.level=DEBUG
%dev.quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n
%dev.quarkus.log.file.rotation.max-file-size=10M
%dev.quarkus.log.file.rotation.max-backup-index=10

# ======================================================================================================================
# Service Registration Configuration
# ======================================================================================================================
service.registration.enabled=true
service.registration.service-name=platform-registration-service
service.registration.description=Platform service registration and discovery service
service.registration.service-type=APPLICATION
service.registration.host=${PLATFORM_REGISTRATION_HOST:host.docker.internal}
service.registration.port=${quarkus.http.port}
service.registration.capabilities=platform-registration,service-discovery
service.registration.tags=grpc,core-service,registration,traefik.enable=true,traefik.http.routers.platform-registration.rule=PathPrefix(`/platform-registration`),traefik.http.routers.platform-registration.entrypoints=web
%test.service.registration.enabled=false

# Use service discovery for registration service
pipeline.registration.discovery-name=platform-registration-service
